{"version":3,"sources":["es6/axon.es.js"],"names":[],"mappings":"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","file":"axon.es.js","sourcesContent":["/**\r\n * Store strings to avoid duplicate strings\r\n */\r\nconst _more = \": \";\r\nconst _error = \"error in \";\r\nconst _factory = \"factory\";\r\nconst _service = \"service\";\r\nconst _isUndefined = \" is undefined\";\n\n/**\n * Checks if service exist, else add it\n *\n * @param {String} type The type of the service (service/factory)\n * @param {Function} cf The Constructor function of the service\n * @param {String} name The name to register/id the service\n * @param {Array} deps List of dependencies\n * @param {Function} fn Content of the service\n * @returns {Object} Returns `this`\n */\nfunction provider (type, cf, name, deps, fn) {\n    const _this = this;\n\n    if (_this.chev[name]) {\n        //throw error if a service with this name already exists\n        throw _this.id + _more + _error + name + \" already exists\";\n    } else {\n        //Add the service to container\n        _this.chev[name] = {\n            type,\n            cf,\n            name,\n            deps,\n            fn,\n            init: false\n        };\n\n        return _this;\n    }\n}\n\n/**\n * Adds a new service type\n *\n * @param {String} type The name of the type\n * @param {Function} cf Constructor function to init the service with\n * @returns {Object} Returns `this`\n */\nfunction extend (type, cf) {\n    const _this = this;\n\n    //Add customType method to container\n    _this[type] = function (name, deps, fn) {\n        return _this.provider(type, cf, name, deps, fn);\n    };\n\n    return _this;\n}\n\n/**\n * Collects dependencies and initializes service\n *\n * @private\n * @param {Object} _this The context\n * @param {Object} service The service to check\n * @param {Object} list The list of dependencies\n * @returns {Object} Returns `service`\n */\nfunction initialize (_this, service, list) {\n    if (!service.init) {\n        const bundle = [];\r\n\n        //Collect an ordered Array of dependencies\n        service.deps.forEach(item => {\n            const dependency = list[item];\n\n            if (dependency) {\n                bundle.push(dependency.fn);\n            }\n        });\n\n        //Init service\n        //Call Constructor fn with service/deps\n        service = service.cf(service, bundle);\n        service.init = true;\n    }\n\n    return service;\n}\n\n/**\n * Loops trough dependencies, recurse if new dependencies has dependencies itself; then execute fn.\n *\n * @private\n * @param {Object} _this The context\n * @param {Array} service The dependencyList to iterate\n * @param {Function} fn The function run over each dependency\n * @returns void\n */\nfunction recurseDependencies(_this, service, fn) {\n    //loop trough deps\n    service.deps.forEach(name => {\n        const dependency = _this.chev[name];\n\n        if (dependency) {\n            //recurse over sub-deps\n            recurseDependencies(_this, dependency, fn);\n            //run fn\n            fn(dependency);\n        } else {\n            //if not found error with name\n            throw _this.id + _more + _error + service.name + _more + \"dependency \" + name + _isUndefined;\n        }\n    });\n}\n\n/**\n * Check if every dependency is available\n *\n * @private\n * @param {Object} _this The context\n * @param {Object} service The service to prepare\n * @returns {Object} Initialized service\n */\nfunction prepare(_this, service) {\n    const list = {};\n\n    //Recurse trough service deps\n    recurseDependencies(\n        _this,\n        service,\n        //run this over every dependency to add it to the dependencyList\n        dependency => {\n            //make sure if dependency is initialized, then add\n            list[dependency.name] = initialize(_this, dependency, list);\n        }\n    );\n\n    return initialize(_this, service, list);\n}\n\n/**\n * Access service with dependencies bound\n *\n * @param {String} name The Name of the service\n * @returns {*} Returns Content of the service\n */\nfunction access(name) {\n    const _this = this,\n        accessedService = _this.chev[name];\n\n    //Check if accessed service is registered\n    if (accessedService) {\n        //Call prepare with bound context\n        return prepare(_this, accessedService).fn;\n    }\n}\n\n/**\n * Creates method entry for service\n *\n * @private\n * @param {Object} _this The context\n * @returns Returns void\n */\nfunction initService(_this) {\n    _this.extend(_service, function(service, bundle) {\n        //Construct service\n        const serviceFn = service.fn;\n\n        service.fn = function() {\n            //Chevron service function wrapper\n            return serviceFn.apply(null, bundle.concat(Array.from(arguments)));\n        };\n\n        return service;\n    });\n}\n\n/**\n * Creates method entry for factory\n *\n * @private\n * @param {Object} _this The context\n * @returns Returns void\n */\nfunction initFactory(_this) {\n    _this.extend(_factory, function(service, bundle) {\n        //Construct factory\n\n        //First value gets ignored by calling new like this, so we need to fill it\n        bundle.unshift(null);\n\n        //Apply into new constructor by accessing bind proto. from: http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n        service.fn = new(Function.prototype.bind.apply(service.fn, bundle));\n\n        return service;\n    });\n}\n\n/**\r\n * Basic Chevron Constructor\r\n *\r\n * @constructor\r\n * @param {String} id To identify the instance\r\n * @returns {Object} Returns Chevron instance\r\n */\r\nlet Chevron = function(id) {\r\n    const _this = this;\r\n\r\n    //Instance Id\r\n    _this.id = id || \"cv\";\r\n    //Instance container\r\n    _this.chev = {};\r\n\r\n    //Init default types\r\n    initService(_this);\r\n    initFactory(_this);\r\n};\r\n\r\n/**\r\n * Expose Chevron methods\r\n */\r\nChevron.prototype = {\r\n    //Core service/factory method\r\n    provider,\r\n    //Prepare/init services/factory with deps injected\r\n    access,\r\n    //Add new service type\r\n    extend\r\n};\n\n/**\n * Store constants\n */\nconst _window = window;\nconst _document = _window.document;\nconst _domNameSpace = \"xn\";\nconst _expressionRegex = /{{(.+)}}/g;\n\n/**\n * Creates querySelector string\n *\n * @private\n * @param {String} data The data id\n * @param {String} val The data value\n * @return {String} Returns Query\n */\nfunction constructQuery(data, val) {\n    if (!val || val === \"*\") {\n        return `[${_domNameSpace}-${data}]`;\n    } else {\n        return `[${_domNameSpace}-${data}='${val}']`;\n    }\n}\n\n/**\n * Query multiple from DOM\n *\n * @private\n * @param {String} data The data id\n * @param {String} val The data value\n * @param {Node} context optional, query context\n * @return {NodeList} Returns NodeList\n */\nfunction queryDirective(data, val, context) {\n    return (context ? context : _document).querySelectorAll(constructQuery(data, val));\n}\n\n/**\n * Read Data from element\n *\n * @private\n * @param {Node} element The Element to read\n * @param {String} data The data attr to read\n * @return {String} Returns value\n */\nfunction readDirective(element, data) {\n    return element.attributes[`${_domNameSpace}-${data}`].value;\n}\n\n/**\n * Misc Utility functions\n */\n\n/**\n * iterate over NoddeList\n *\n * @private\n * @param {NodeList} NodeList The Elements to bind\n * @param {Function} fn The Function to call\n * @returns void\n */\nfunction eachNode(NodeList, fn) {\n    const l = NodeList.length;\n    let i = 0;\n\n    while (i < l) {\n        fn(NodeList[i], i);\n        i++;\n    }\n}\n/**\n * Iterate object\n *\n * @private\n * @param {Object} object The Object to iterate\n * @param {Function} fn The Function to run\n * @returns void\n */\nfunction eachObject(object, fn) {\n    const keys = Object.keys(object);\n    const l = keys.length;\n    let i = 0;\n\n    while (i < l) {\n        const currentKey = keys[i];\n\n        fn(object[currentKey], currentKey, i);\n        i++;\n    }\n}\n/**\n * replace string at position\n *\n * @private\n * @param {String} string The String to exec\n * @param {String} find The String to find\n * @param {String} replace The String to replace\n * @param {Number} index The Index to start replacing\n * @returns {String} replacedString\n */\nfunction replaceFrom(string, find, replace, index) {\n    return string.substr(0, index) + string.substr(index).replace(find, replace);\n}\n\nvar text = {\n    onBind: function (ctrl, context) {\n        const result = [];\n        const nodes = getTextNodes(context);\n        let match;\n\n        //Iterate Nodes\n        nodes.forEach(node => {\n            //Iterate Regex\n            while ((match = _expressionRegex.exec(node.textContent)) !== null) {\n                if (match.index === _expressionRegex.lastIndex) {\n                    _expressionRegex.lastIndex++;\n                }\n\n                result.push({\n                    match: match[0],\n                    data: match[1],\n                    val: match[0],\n                    index: match.index,\n                    parent: node\n                });\n            }\n        });\n\n        return result;\n\n        //Modified version of http://stackoverflow.com/questions/10730309/find-all-text-nodes-in-html-page\n        function getTextNodes(node) {\n            let all = [];\n            for (node = node.firstChild; node; node = node.nextSibling) {\n                if (node.nodeType === 3 && node.parentNode.nodeName !== \"SCRIPT\") {\n                    all.push(node);\n                } else {\n                    all = all.concat(getTextNodes(node));\n                }\n            }\n            return all;\n        }\n    },\n    onDigest: function (ctrl, context, entry) {\n        const result = ctrl[entry.data];\n\n        if (typeof result !== \"undefined\") {\n            console.log(\"EXPR:\", entry.val, result, entry.index);\n            entry.parent.textContent = replaceFrom(entry.parent.textContent, entry.val, result, entry.index);\n            entry.val = result;\n\n            return result;\n        } else {\n            throw \"Error in Expression:\" + entry.data;\n        }\n    }\n};\n\nvar expressions = {\n    text\n};\n\n/**\n * Digest & render dom\n *\n * @private\n * @param {Object} ctrl The Controller\n * @return {Node} context The Controller context\n */\nfunction digest (ctrl) {\n\n    //Debounce Digest\n    if (!ctrl.$data.isDigesting) {\n        ctrl.$data.isDigesting = true;\n\n        iteratePlugins(directives, ctrl.$directives, (entry, plugin) => {\n            plugin.onDigest(ctrl, ctrl.$context, entry);\n        });\n\n        iteratePlugins(expressions, ctrl.$expressions, (entry, plugin) => {\n            plugin.onDigest(ctrl, ctrl.$context, entry);\n        });\n\n        setTimeout(() => {\n            ctrl.$data.isDigesting = false;\n        }, ctrl.$data.digestTimeout);\n    }\n\n    function iteratePlugins(pluginData, data, fn) {\n        eachObject(pluginData, (plugin, key) => {\n            const active = data[key];\n\n            active.forEach(entry => {\n                fn(entry, plugin);\n            });\n        });\n    }\n}\n\n/**\n * Binds event to dom\n *\n * @private\n * @param {NodeList} domList The Elements to bind\n * @param {String} type The Event type\n * @param {Function} fn The Even function\n * @return void\n */\nfunction bind(domList, type, fn) {\n    eachNode(domList, dom => {\n        dom.addEventListener(type, eventFn, false);\n\n        function eventFn(ev) {\n            return fn(ev, dom);\n        }\n    });\n}\n\nvar model = {\n    onBind: function(ctrl, context) {\n        const result = [];\n        const elements = queryDirective(\"model\", \"*\", context);\n\n        bind(elements, \"change\", modelEvent);\n        bind(elements, \"input\", modelEvent);\n\n        eachNode(elements, (element, index) => {\n            result.push({\n                index,\n                element,\n                type: \"model\",\n                value: readDirective(element, \"model\")\n            });\n        });\n\n        return result;\n\n        function modelEvent(ev, dom) {\n            _window.setTimeout(() => {\n                const content = dom.value;\n                const modelFor = readDirective(dom, \"model\");\n\n                //console.log(\"MODEL:\", modelFor, content);\n                ctrl[modelFor] = content;\n\n                digest(ctrl);\n            }, 5);\n        }\n    },\n    onDigest: function(ctrl, context, entry) {\n        entry.element.value = ctrl[entry.value];\n    }\n};\n\n//import changeImported from \"./change\";\n\nvar directives = {\n    model\n};\n\n/**\n * Binds directives to controller\n *\n * @private\n * @param {Object} ctrl The Controller\n * @return {Object} Returns bound Object\n */\nfunction bindDirectives(ctrl) {\n    const result = {};\n\n    eachObject(directives, (directive, key, index) => {\n        result[key] = directive.onBind(ctrl, ctrl.$context);\n    });\n\n    return result;\n}\n\n/**\n * Binds expressions to controller\n *\n * @private\n * @param {Object} ctrl The Controller\n * @return {Object} Returns bound Object\n */\nfunction bindExpressions(ctrl) {\n    const result = {};\n\n    eachObject(expressions, (expressions, key, index) => {\n        result[key] = expressions.onBind(ctrl, ctrl.$context);\n    });\n\n    return result;\n}\n\n/**\n * Creates typeList entry for Controller\n *\n * @private\n * @param {Object} service The service\n * @param {Object} bundle The service deps\n * @return {Function} service\n */\nfunction controllerFn (service, bundle) {\n    //Construct Controller\n    //\n    //First value gets ignored by calling new like this, so we need to fill it\n    bundle.unshift(null);\n    //Apply into new constructor by accessing bind proto. from: http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n    const ctrl = service.fn = new(Function.prototype.bind.apply(service.fn, bundle));\n\n    //Bind Context\n    _document.addEventListener(\"DOMContentLoaded\", function (event) {\n        ctrl.$context = queryDirective(\"controller\", service.name)[0];\n        ctrl.$expressions = bindExpressions(ctrl);\n        ctrl.$directives = bindDirectives(ctrl);\n        ctrl.$data = {\n            isDigesting: false,\n            digestTimeout: 100\n        };\n        //run first digest\n        digest(ctrl);\n    });\n\n    console.log(service);\n\n    return service;\n}\n\n/**\n * Basic Axon Constructor\n *\n * @constructor\n * @param {String} id To identify the instance\n * @returns {Object} Returns Axon instance\n */\nlet Axon = function(id) {\n    const _this = this;\n\n    //Instance Id\n    _this.id = id;\n    //Instance container\n    _this.cv = new Chevron(id + \"Container\");\n    //context\n    _this.context = queryDirective(\"app\", id)[0];\n\n    //Init Axon types\n    _this.cv.extend(\"controller\", controllerFn);\n};\n\n//Bind Chevron methods directly to parent\nconst methods = [\"access\", \"extend\", \"provider\", \"service\", \"factory\", \"controller\"];\n\nmethods.forEach(method => {\n    Axon.prototype[method] = function() {\n        return this.cv[method].apply(this.cv, Array.from(arguments));\n    };\n});\n\nexport default Axon;"]}